plugins {
	id 'org.springframework.boot' version '2.6.3' // support Spring Boot in Gradle
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'com.adarshr.test-logger' version '2.1.1' // Gradle Test Logger Plugin
	id 'com.github.ben-manes.versions' version '0.38.0' // Gradle Versions Plugin
	id 'application'
	id 'checkstyle'
	id 'jacoco'
	id 'org.liquibase.gradle' version '2.1.1'
	id 'org.siouan.frontend-jdk11' version '6.0.0' // Сборщик фронтенда
	id "com.dorongold.task-tree" version '2.1.0' // prints task dependency tree report to the console
	// plugins for swagger
	id "org.springdoc.openapi-gradle-plugin" version "1.3.3" // generate OAS and run swagger-ui
	id "com.github.johnrengelman.processes" version "0.5.0" // Gradle process plugin need for openapi-gradle-plugin
}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'
sourceCompatibility = '15' // GitHub Actions supported only 15 version
// 1-й путь для поиска Q-классов
sourceSets.main.java.srcDirs = ['build/generated/sources/annotationProcessor/java/main','src/main/java']

//applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]

application {
	mainClass = 'hexlet.code.AppApplication'
}

compileJava {
	options.release = 15  // GitHub Actions supported only 15 version
	options.encoding = 'UTF-8'
}

repositories {
	mavenCentral()
}

// чтобы Q-классы не чекал
checkstyleMain {
	source = fileTree('src/main/java')
}

dependencies {
	implementation(
			'org.springframework.boot:spring-boot-starter-web',
			'org.springframework.boot:spring-boot-starter-data-jpa',
			'org.springframework.boot:spring-boot-starter-validation',
			'org.springframework.boot:spring-boot-starter-security',
			'io.jsonwebtoken:jjwt:0.9.1',
			'com.querydsl:querydsl-core:5.0.0',
			'com.querydsl:querydsl-jpa:5.0.0',
			'org.springdoc:springdoc-openapi-ui:1.5.12'
	)

	// DB + migration
	implementation 'org.liquibase:liquibase-core:4.6.1'
	runtimeOnly 'com.h2database:h2:1.4.200'
	implementation 'org.postgresql:postgresql:42.2.24'

	// Зависимости, необходимые для работы плагина liquibase
	liquibaseRuntime(
			sourceSets.main.output,
			'org.liquibase:liquibase-core:4.6.1',
			'org.liquibase.ext:liquibase-hibernate5:4.6.2',
			'org.springframework.boot:spring-boot-starter-data-jpa'
	)

	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jpa' // генерилка Q-классов при компиляции
	annotationProcessor 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'
	annotationProcessor 'javax.annotation:javax.annotation-api:1.3.2' // Common Annotations for the JavaTM Platform API

	// for java spicing
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// test
	testImplementation(
			'org.springframework.boot:spring-boot-starter-test',
			'com.github.database-rider:rider-junit5:1.32.0' // наполнение тестовой БД данными
	)
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // report is always generated after tests run
}

testlogger {
	showStandardStreams true
}

// Таска diffChangeLog для генерации миграционного скрипта при каждом изменении в модели
diffChangeLog {
	dependsOn compileJava
}

// Настройка плагина liquibase-gradle-plugin
// Скрипт созданный liquibase после сравнения будет представлять из себя разницу между моделью по ссылке referenceUrl и базой по ссылке url
liquibase {
	activities {
		main {
			// Путь, по которому будет сгенерирован файл миграции
			changeLogFile 'src/main/resources/db/changelog/changelog-master.xml'
			// БД с которой будут сравниваться изменения
			url 'jdbc:h2:./hexlet' // jdbc:postgresql://172.25.120.42:5432/hexletdb
			username 'sa' // postgres
			password ''
			// Пакет с моделями, где 'hibernate:spring' указание на то, что сравнивать нужно с моделями (м.б. указана другая БД)
			referenceUrl 'hibernate:spring:hexlet.code.model' +
					// диалект для postgres не нужен, у hibernate сложности только с h2 при использовании 2 БД
					'?dialect=org.hibernate.dialect.H2Dialect' +
					// Правила именования таблиц и столбцов, чтобы они соответствовали правилам Spring
					'&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy'
		}
	}
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.required = true // coveralls plugin depends on xml format report
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ['hexlet/code/AppApplication.class', 'hexlet/code/model/query/*.class']
			)
		}))
	}
}

// Сборка фронтенда
// *****************************************************************************
frontend {
	nodeVersion = '16.13.1'
	installScript = 'install'
	assembleScript = 'run build'
	packageJsonDirectory = file("${projectDir}/frontend")
}

def configFrontendTasks = {
	inputs.files(fileTree("$projectDir/frontend").exclude('build', 'node_modules'))
	outputs.dir("$buildDir/resources/main/static")
}

assembleFrontend {
	configure configFrontendTasks

	doLast {
		copy {
			from "$projectDir/frontend/build"
			into "$buildDir/resources/main/static"
		}
	}
}

installFrontend {
	configure configFrontendTasks
}

processResources.dependsOn assembleFrontend
// *****************************************************************************

// Настройка плагина springdoc-openapi-ui. После запуска приложения
// документация для выгрузки будет доступна указанному url
openApi {
	apiDocsUrl.set("http://localhost:5000/v3/api-docs.yaml")
	forkProperties.set("-Dspring.profiles.active=dev")
	outputFileName.set("openapi.yaml")
}

// Таска нужная heroku для деплоя
task stage(dependsOn: ['clean', 'installDist'])
installDist.mustRunAfter clean